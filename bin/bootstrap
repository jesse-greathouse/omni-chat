#!/usr/bin/env perl
use strict;
use warnings;
use File::Path qw(make_path remove_tree);
use File::Find qw(find);
use File::Glob qw(bsd_glob);
use Cwd qw(abs_path);
use File::Spec;

# --------------------------
# Config (override via env)
# --------------------------
my $SWITCH     = $ENV{OMNI_OCAML_SWITCH} // 'omni-irc-dev';
my $REPO_URL   = $ENV{OMNI_IRC_REPO}    // 'https://github.com/jesse-greathouse/omni-irc';
my $REV        = $ENV{OMNI_IRC_REV}     // '0.1.14';   # locked tag
my $OCAML_HINT = $ENV{OMNI_OCAML_HINT}  // '5.3.0';    # preferred OCaml version

$ENV{OPAMYES}  = '1';
$ENV{OPAMROOT} = $ENV{OPAMROOT} // "$ENV{HOME}/.opam";

# Clear env that can confuse opam/ocaml
delete @ENV{qw(
  OPAMSWITCH OCAMLLIB OCAMLPATH CAML_LD_LIBRARY_PATH CAML_LD_LIBRARY_PATH__F
  OCAML_TOPLEVEL_PATH FLEXLINKFLAGS FLEXDLL_CHAIN MAKE MAKEFLAGS CC CL
)};

sub dief { printf STDERR shift, @_; exit 1 }

# --------------------------
# Resolve absolute tool paths
# --------------------------
sub _is_exec {
  my ($p) = @_;
  return unless defined $p && length $p;
  return (-f $p && -x $p) ? $p : undef;
}
sub _join {
  my ($dir, $cmd) = @_;
  my $p = File::Spec->catfile($dir, $cmd);
  return _is_exec($p);
}
sub resolve_tool {
  my ($name) = @_;
  # 1) explicit env overrides
  my @env_keys = (
    uc($name) . '_EXE',              # e.g. OPAM_EXE, GIT_EXE
    'OMNI_' . uc($name) . '_EXE',    # e.g. OMNI_OPAM_EXE, OMNI_GIT_EXE
  );
  for my $k (@env_keys) {
    my $v = $ENV{$k};
    if (my $p = _is_exec($v)) { return $p }
  }
  # 2) PATH search (best effort; PATH may be minimal)
  my $PATH = $ENV{PATH} // '';
  for my $d (split /:/, $PATH) {
    if (my $p = _join($d, $name)) { return $p }
  }
  # 3) common install prefixes (macOS/Homebrew, MacPorts, Linux user bin)
  my @common = grep { defined && length } (
    '/opt/homebrew/bin',     # Apple Silicon Homebrew
    '/usr/local/bin',        # Intel mac + many Linux
    '/opt/local/bin',        # MacPorts
    "$ENV{HOME}/.local/bin", # Linux user installs
    '/usr/bin',              # system
  );
  for my $d (@common) {
    if (my $p = _join($d, $name)) { return $p }
  }
  return undef;
}

my $OPAM = resolve_tool('opam')
  or dief("opam not found. Set OPAM_EXE to its full path (e.g., /opt/homebrew/bin/opam) and re-run.\n");
my $GIT  = resolve_tool('git')
  or dief("git not found. Set GIT_EXE to its full path and re-run.\n");

sub run {
  my (@cmd) = @_;
  system @cmd;
  my $code = $? >> 8;
  $code == 0 or dief("Command failed (%d): %s\n", $code, join(' ', map { /\s/ ? "'$_'" : $_ } @cmd));
}
sub capture {
  my (@cmd) = @_;
  open my $fh, "-|", @cmd or dief("Failed to spawn: %s\n", join(' ', @cmd));
  local $/;
  my $out = <$fh>;
  close $fh;
  my $code = $? >> 8;
  $code == 0 or dief("Command failed (%d): %s\n", $code, join(' ', @cmd));
  return $out;
}

print "[bootstrap] Using OPAMROOT=$ENV{OPAMROOT}\n";

# 0) prerequisites
print "[bootstrap] using opam at: $OPAM\n";
print "[bootstrap] using git  at: $GIT\n";

# 1) ensure OPAM root and init if missing
if (!-d $ENV{OPAMROOT}) { make_path($ENV{OPAMROOT}); }
my $config = "$ENV{OPAMROOT}/config";
if (!-f $config) {
  run($OPAM, 'init', '--disable-sandboxing');  # fine on macOS/Linux too
}

# 2) repo check/add; handle stale $OPAMROOT/repo/default
my $repo_dir = "$ENV{OPAMROOT}/repo/default";
my $repos = '';
eval { $repos = capture($OPAM, 'repo', 'list', '--short'); 1 } or $repos = '';
my %listed = map { $_ => 1 } grep { length } split(/\r?\n/, $repos);

if (!$listed{default}) {
  if (-d $repo_dir) {
    print "Repo dir exists but 'default' is not registered; removing stale dir and re-adding...\n";
    my $ok_rm = eval { remove_tree($repo_dir, { error => \my $err }); 1 };
    if (!$ok_rm) {
      warn "Could not remove stale repo dir at $repo_dir. Attempting 'opam repo set-url'...\n";
      eval { run($OPAM, 'repo', 'set-url', 'default', 'https://opam.ocaml.org', '--set-default'); 1 }
        or dief("opam repo registration is inconsistent and the stale dir could not be removed. Close shells/IDEs, delete '%s' manually, then re-run.\n", $repo_dir);
    }
  }
  my $repos2 = '';
  eval { $repos2 = capture($OPAM, 'repo', 'list', '--short'); 1 } or $repos2 = '';
  my %listed2 = map { $_ => 1 } grep { length } split(/\r?\n/, $repos2);
  if (!$listed2{default}) {
    run($OPAM, 'repo', 'add', 'default', 'https://opam.ocaml.org', '--set-default');
  }
} else {
  print "Default repo already registered.\n";
}

print "Updating opam package index...\n";
run($OPAM, 'update');

# 3) create switch if missing (prefer ocaml-compiler.$OCAML_HINT, then 5.2.1, then base)
my $have = capture($OPAM, 'switch', 'list', '--short');
my %have = map { $_ => 1 } grep { length } split(/\r?\n/, $have);

if (!$have{$SWITCH}) {
  print "No '$SWITCH' switch found. Creating it...\n";
  my @candidates;
  push @candidates, "ocaml-compiler.$OCAML_HINT" if $OCAML_HINT;
  push @candidates, "ocaml-compiler.5.2.1";
  push @candidates, "ocaml-base-compiler";
  my $ok = 0;
  for my $spec (@candidates) {
    print "  - trying package set: $spec\n";
    my $rc = system($OPAM, 'switch', 'create', $SWITCH, '--packages', $spec);
    if (($rc >> 8) == 0) { $ok = 1; last; }
  }
  $ok or dief("Could not create switch '%s' (tried: %s)\n", $SWITCH, join(' | ', @candidates));
}

# 4) apply opam env to this process
my $env_lines = capture($OPAM, 'env', '--switch', $SWITCH, '--set-switch', '--shell=sh');
$env_lines =~ s/\n/; /g;
for my $stmt (split /\s*;\s*/, $env_lines) {
  if ($stmt =~ /^\s*export\s+([A-Za-z_][A-Za-z0-9_]*)=(["']?)(.*?)\2\s*$/) {
    my ($k, $v) = ($1, $3);
    $ENV{$k} = $v;
  }
}

# 5) fetch omni-irc sources at locked tag
my $cache_root = "$ENV{HOME}/.cache/omni-irc/src";
make_path($cache_root) if !-d $cache_root;
my $src_dir = "$cache_root/omni-irc-$REV";
if (!-d $src_dir) {
  print "Cloning $REPO_URL @ $REV -> $src_dir\n";
  run('git', 'clone', '--depth', '1', '--branch', $REV, $REPO_URL, $src_dir);
} else {
  print "Reusing $src_dir\n";
  run('git', '-C', $src_dir, 'fetch', '--tags', '--depth', '1', 'origin', $REV);
  run('git', '-C', $src_dir, 'checkout', '--force', $REV);
  run('git', '-C', $src_dir, 'reset', '--hard', '--quiet');
}

# 6) toolchain helpers
run($OPAM, 'install', '--switch', $SWITCH, 'dune', 'ocamlfind');

# 7) pin all .opam packages (register only; no build yet), recursively
my @opam_files;
find(
  sub {
    return unless -f $_ && $_ =~ /\.opam$/;
    push @opam_files, $File::Find::name;
  },
  $src_dir
);

if (!@opam_files) {
  warn "No .opam files found under $src_dir. Ensure they are present (or generated).\n";
} else {
  print "Pinning packages (register only; no build yet) from: $src_dir\n";
  my %names = map {
    my ($n) = $_ =~ m{([^/\\]+)\.opam$};
    $n ? ($n => 1) : ()
  } @opam_files;
  for my $pkg (sort keys %names) {
    print "  - pinning $pkg\n";
    run($OPAM, 'pin', 'add', '--switch', $SWITCH, '-k', 'path', '--no-action', $pkg, $src_dir);
  }
  run($OPAM, 'pin', 'list', '--switch', $SWITCH);
}

# 8) (opam â‰¥ 2.1) install system deps for the pinned client (best-effort)
#    This replaces the old opam-depext plugin.
eval { run($OPAM, 'install', '--switch', $SWITCH, '--depext-only', 'omni-irc-client'); 1 }
  or warn "depext-only step failed; you may need system libs (e.g., brew install gmp openssl\@3 pkg-config)\n";

# 9) extra dep that may not be declared upstream
run($OPAM, 'install', '--switch', $SWITCH, 'yojson');

# 10) install client
run($OPAM, 'install', '--switch', $SWITCH, 'omni-irc-client');

# 11) report
my $bin = capture($OPAM, 'var', '--switch', $SWITCH, 'bin');
$bin =~ s/\s+$//;
print "omni-irc-client installed to: $bin\n";
my $exe = "$bin/omni-irc-client";
$exe .= '.exe' if $^O =~ /MSWin/;
if (-x $exe) { system($exe, '--help'); }

print "\nDone. This terminal now has:\n";
print "  OPAMROOT   = $ENV{OPAMROOT}\n";
print "  OPAMSWITCH = $SWITCH\n\n";
print "*******************************************************************\n";
print "*  Omni-IRC bootstrap is COMPLETE. You can now close this window. *\n";
print "*******************************************************************\n";
